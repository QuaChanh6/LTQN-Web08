<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DevMsg_DataTooLong" xml:space="preserve">
    <value>Data too long</value>
    <comment>Message cho Dev khi dữ liệu vượt quá độ dài quy định</comment>
  </data>
  <data name="DevMsg_DeleteFailed" xml:space="preserve">
    <value>Delete failed</value>
    <comment>Message cho Dev khi xóa thất bại</comment>
  </data>
  <data name="DevMsg_DuplicateCode" xml:space="preserve">
    <value>Duplicate EmployeeCode</value>
    <comment>Message cho Dev khi bị trùng mã nhân viên</comment>
  </data>
  <data name="DevMsg_Exception" xml:space="preserve">
    <value>Catched an exception</value>
    <comment>Message cho Dev đọc khi gặp exception</comment>
  </data>
  <data name="DevMsg_FilterFailed" xml:space="preserve">
    <value>Filter failed</value>
    <comment>Message cho Dev khi lọc thất bại</comment>
  </data>
  <data name="DevMsg_GetRecordFailed" xml:space="preserve">
    <value>Get data error occurred</value>
    <comment>Message cho Dev khi lấy bản ghi thất bại</comment>
  </data>
  <data name="DevMsg_InsertFailed" xml:space="preserve">
    <value>Insert data return 0</value>
    <comment>Message cho Dev khi thêm bản ghi thất bại</comment>
  </data>
  <data name="DevMsg_ValidateFailed" xml:space="preserve">
    <value>One or more validation errors occurred</value>
    <comment>Message cho Dev khi validate dữ liệu đầu vào thất bại</comment>
  </data>
  <data name="MoreInfo" xml:space="preserve">
    <value>"https://openapi.misa.com.vn/errorcode"</value>
    <comment>Đường dẫn tới mô tả lỗi</comment>
  </data>
  <data name="Proc_Delete" xml:space="preserve">
    <value>Proc_{0}_Delete</value>
    <comment>Template xóa 1 bản ghi trong 1 bảng</comment>
  </data>
  <data name="Proc_Edit" xml:space="preserve">
    <value>Proc_{0}_Edit</value>
    <comment>Template sửa 1 bản ghi trong 1 bảng</comment>
  </data>
  <data name="Proc_Filter" xml:space="preserve">
    <value>Proc_{0}_Filter</value>
    <comment>Template phân trang, tìm kiếm trong 1 bảng</comment>
  </data>
  <data name="Proc_GetAll" xml:space="preserve">
    <value>Proc_{0}_GetAll</value>
    <comment>Template lấy tất cả bản ghi trong 1 bảng</comment>
  </data>
  <data name="Proc_GetRecord" xml:space="preserve">
    <value>Proc_{0}_Get</value>
    <comment>Template lấy thông tin 1 bản ghi trong 1 bảng</comment>
  </data>
  <data name="Proc_Insert" xml:space="preserve">
    <value>Proc_{0}_AddRecord</value>
    <comment>Template thêm 1 bản ghi trong 1 bảng</comment>
  </data>
  <data name="UserMsg_DataTooLong" xml:space="preserve">
    <value>Dữ liệu quá dài, vui lòng nhập lại.</value>
    <comment>Message cho User khi nhập dữ liệu dài</comment>
  </data>
  <data name="UserMsg_DeleteFailed" xml:space="preserve">
    <value>Xóa nhân viên thất bại.</value>
    <comment>Message cho User khi xóa thất bại</comment>
  </data>
  <data name="UserMsg_DuplicateCode" xml:space="preserve">
    <value>Mã nhân viên đã tồn tại trong hệ thống, vui lòng kiểm tra lại.</value>
    <comment>Message cho User khi bị trùng mã nhân viên</comment>
  </data>
  <data name="UserMsg_Exception" xml:space="preserve">
    <value>Có lỗi xảy ra! vui lòng liên hệ với MISA.</value>
    <comment>Message cho User đọc khi gặp exception</comment>
  </data>
  <data name="UserMsg_FilterFailed" xml:space="preserve">
    <value>Lọc thất bại.</value>
    <comment>Message cho User khi lọc thất bại</comment>
  </data>
  <data name="UserMsg_GetRecordFailed" xml:space="preserve">
    <value>Lấy dữ liệu thất bại.</value>
    <comment>Message cho User khi lấy bản ghi thất bại</comment>
  </data>
  <data name="UserMsg_InsertFailed" xml:space="preserve">
    <value>Thêm bản ghi thất bại.</value>
    <comment>Message cho User đọc khi thêm bản ghi thất bại</comment>
  </data>
  <data name="UserMsg_UpdateFailed" xml:space="preserve">
    <value>Sửa bản ghi thất bại.</value>
    <comment>Message cho User khi sửa thất bại</comment>
  </data>
  <data name="UserMsg_ValidateFailed" xml:space="preserve">
    <value>Dữ liệu đầu vào không hợp lệ.</value>
    <comment>Message cho User khi validate dữ liệu đầu vào thất bại</comment>
  </data>
</root>